import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.StdStats;
import edu.princeton.cs.algs4.WeightedQuickUnionUF;
import edu.princeton.cs.algs4.MinPQ;
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

public class Percolation {
private int n;
private WeightedQuickUnionUF wquf;
private int[] openSites;

	public static void main(String[] args) {
		Percolation p = new Percolation(10);
	    System.out.println("hello");
	    StdOut.println(p.isVirtualTop(10));
	    StdOut.println(p.isVirtualBottom(10));
//	    p.open(1, 1);
//	    p.open(1, 2);
//	    StdOut.println(p.isOpen(5, 2));
//	    p.wquf.union(1, 2);
//	    
//	    StdOut.println(p.wquf.connected(1,2));
	}
	
//create n-by-n grid, with all sites blocked
   public Percolation(int n) {  
	   if(n <= 0) throw new IllegalArgumentException("n is less than 0!");
	   this.n = n;
	   this.wquf = new WeightedQuickUnionUF(this.n*this.n);
	   this.openSites = new int[this.n*this.n];
   }
   
// open site (row, col) if it is not open already
   public void open(int row, int col){
	   this.validIndex(row);
	   this.validIndex(col);
	   int num = this.rowColTo1D(row, col);
	   this.openSites[num] = 1;  
	   
	   //check if top, left, bottom, and right are open
	   //if yes then unite it
	   
	   StdOut.println("open");
	   
//	   StdOut.print(this.openSites);
   }
// is site (row, col) open?
   public boolean isOpen(int row, int col) {
	   this.validIndex(row);
	   this.validIndex(col);
	   int num = this.rowColTo1D(row, col);
	   if(this.openSites[num]==1){
		   return true;
	   }
       return false;
   }
// is site (row, col) full?
   public boolean isFull(int row, int col)  {
	   this.validIndex(row);
	   this.validIndex(col);
	   int num = this.rowColTo1D(row, col);
	   
	   if(num <= row){
		   return true;
	   }else if(true){
		 //check if this num is connected to open tile at the top   
	   }
       return false;
   }
// does the system percolate?
   public boolean percolates() {
	   
       return false;
   }
   
   private boolean isVirtualTop(int x){
	   if(x <= this.n){
		   return true;
	   }
	   return false;
   }
   
   private boolean isVirtualBottom(int x){
	   if(x >= (this.n*(this.n-1))){
		   return true;
	   }
	   return false;
   }
   private void validIndex(int index){
	   if (index <= 0 || index > n) throw new IndexOutOfBoundsException("row index i out of bounds");
   }
   
   private int rowColTo1D(int row, int col){
	   int id = this.n*(row-1)+col;
//	   System.out.println("rowColTo1D");
//	   System.out.println(id);
	   return id;
   }
   
}